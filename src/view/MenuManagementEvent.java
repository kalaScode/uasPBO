/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;


import controller.EventController;
import java.awt.GridLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import Database.DatabaseManager;
import model.Event;
import com.toedter.calendar.JDateChooser;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;





/**
 *
 * @author Dell
 */
public class MenuManagementEvent extends javax.swing.JPanel {
    private EventController eventController;
    
    /**
     * Creates new form menuDashboard
     */
    public MenuManagementEvent() {
        initComponents();
        eventController = new EventController();
        fetchData();
    }
    
    private void fetchData() {
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0); 
    String query = "SELECT * FROM event";

    try (Connection conn = DatabaseManager.getInstance().getConnection();
         PreparedStatement stmt = conn.prepareStatement(query);
         ResultSet rs = stmt.executeQuery()) {

        while (rs.next()) {
            Object[] row = {
                rs.getInt("event_id"),
                rs.getString("namaevent"),
                rs.getString("deskripsi"),
                rs.getString("tanggal"),
                rs.getInt("kuota")
            };
            model.addRow(row);
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Gagal mengambil data: " + ex.getMessage());
      }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        buttonEdit = new javax.swing.JButton();
        buttonInsert = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.CardLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(16, 56));

        jTable1.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Event ID", "Nama Event", "Deskripsi", "Tanggal", "Kuota"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setInheritsPopupMenu(true);
        jTable1.setName(""); // NOI18N
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(12);
        }

        jLabel16.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(102, 102, 102));
        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/event.png"))); // NOI18N
        jLabel16.setText("Menu > Management Event");

        jLabel17.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(102, 102, 102));
        jLabel17.setText("Event");

        buttonEdit.setText("Edit");
        buttonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditActionPerformed(evt);
            }
        });

        buttonInsert.setText("Insert");
        buttonInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonInsertActionPerformed(evt);
            }
        });

        buttonDelete.setText("Delete");
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel16)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel17)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(buttonEdit)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(buttonInsert)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(buttonDelete))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 967, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(89, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16)
                .addGap(4, 4, 4)
                .addComponent(jLabel17)
                .addGap(8, 8, 8)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonEdit)
                    .addComponent(buttonInsert)
                    .addComponent(buttonDelete))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        add(jPanel1, "card2");

        getAccessibleContext().setAccessibleName("");
    }// </editor-fold>//GEN-END:initComponents

    private void buttonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow >= 0) {
            int eventId = (int) jTable1.getValueAt(selectedRow, 0);
            String eventName = (String) jTable1.getValueAt(selectedRow, 1);
            String eventDescription = (String) jTable1.getValueAt(selectedRow, 2);
            String eventDate = (String) jTable1.getValueAt(selectedRow, 3);
            int eventQuota = (int) jTable1.getValueAt(selectedRow, 4);

            JTextField eventNameField = new JTextField(eventName, 20);
            JTextField eventDescriptionField = new JTextField(eventDescription, 20);
            JDateChooser eventDateField = new JDateChooser();
            eventDateField.setDateFormatString("yyyy-MM-dd");
            try {
                eventDateField.setDate(DatabaseManager.stringToDate(eventDate));
            } catch (ParseException ex) {
                Logger.getLogger(MenuManagementEvent.class.getName()).log(Level.SEVERE, null, ex);
            }
            JTextField eventQuotaField = new JTextField(String.valueOf(eventQuota), 10);

            JPanel myPanel = new JPanel(new GridLayout(0, 1));
            myPanel.add(new JLabel("Event Name:"));
            myPanel.add(eventNameField);
            myPanel.add(new JLabel("Event Description:"));
            myPanel.add(eventDescriptionField);
            myPanel.add(new JLabel("Event Date (YYYY-MM-DD):"));
            myPanel.add(eventDateField);
            myPanel.add(new JLabel("Event Quota:"));
            myPanel.add(eventQuotaField);

            int result;
            boolean validInput = false;
            do {
                result = JOptionPane.showConfirmDialog(null, myPanel, "Form Edit Event", JOptionPane.OK_CANCEL_OPTION);
                if (result == JOptionPane.OK_OPTION) {
                    // Validasi Tanggal Event
                    String editedEventDate = "";
                    try {
                        editedEventDate = DatabaseManager.dateToString(eventDateField.getDate());
                    } catch (NullPointerException ex) {
                        JOptionPane.showMessageDialog(null, "Tanggal Event harus diisi dengan format yang benar (YYYY-MM-DD).", "Error", JOptionPane.ERROR_MESSAGE);
                        continue; 
                    }

                    // Validasi Kuota Event
                    String quotaInput = eventQuotaField.getText();
                    if (!quotaInput.matches("\\d+")) {
                        JOptionPane.showMessageDialog(null, "Kuota Event harus berupa angka.", "Error", JOptionPane.ERROR_MESSAGE);
                        continue; 
                    }

                    Event editedEvent = new Event(eventId, eventNameField.getText(), eventDescriptionField.getText(), editedEventDate, Integer.parseInt(quotaInput));

                    String validationResult = eventController.validateEvent(editedEvent);
                    if (validationResult == null) {
                        eventController.updateEvent(editedEvent);
                        fetchData();
                        validInput = true; 
                    } else {
                        JOptionPane.showMessageDialog(null, validationResult, "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } while (!validInput && result == JOptionPane.OK_OPTION);
        } else {
            JOptionPane.showMessageDialog(null, "Silahkan pilih event yang ingin diedit.");
        }
    }//GEN-LAST:event_buttonEditActionPerformed

    private void buttonInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInsertActionPerformed
        // TODO add your handling code here:

        JTextField eventNameField = new JTextField(20);
        JTextField eventDescriptionField = new JTextField(20);
        JDateChooser eventDateField = new JDateChooser();
        eventDateField.setDateFormatString("yyyy-MM-dd");
        JTextField eventQuotaField = new JTextField(10);

        JPanel myPanel = new JPanel(new GridLayout(0, 1));
        myPanel.add(new JLabel("Nama Event:"));
        myPanel.add(eventNameField);
        myPanel.add(new JLabel("Deskripsi Event:"));
        myPanel.add(eventDescriptionField);
        myPanel.add(new JLabel("Tanggal Event (YYYY-MM-DD):"));
        myPanel.add(eventDateField);
        myPanel.add(new JLabel("Kuota Event:"));
        myPanel.add(eventQuotaField);

        int result;
        boolean validInput = false;
        do {
            result = JOptionPane.showConfirmDialog(null, myPanel, "Form Tambah Event", JOptionPane.OK_CANCEL_OPTION);
            if (result == JOptionPane.OK_OPTION) {
                // Validasi Tanggal Event
                String eventDate = "";
                try {
                    eventDate = DatabaseManager.dateToString(eventDateField.getDate());
                } catch (NullPointerException ex) {
                    JOptionPane.showMessageDialog(null, "Tanggal Event harus diisi dengan format yang benar (YYYY-MM-DD).", "Error", JOptionPane.ERROR_MESSAGE);
                    continue; 
                }

                // Validasi Kuota Event
                String quotaInput = eventQuotaField.getText();
                if (!quotaInput.matches("\\d+")) {
                    JOptionPane.showMessageDialog(null, "Kuota Event harus berupa angka.", "Error", JOptionPane.ERROR_MESSAGE);
                    continue; 
                }

                Event event = new Event(0, eventNameField.getText(), eventDescriptionField.getText(), eventDate, Integer.parseInt(quotaInput));

                String validationResult = eventController.validateEvent(event);
                if (validationResult == null) {
                    eventController.insertEvent(event);
                    fetchData();
                    validInput = true; 
                } else {
                    JOptionPane.showMessageDialog(null, validationResult, "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } while (!validInput && result == JOptionPane.OK_OPTION);
    }//GEN-LAST:event_buttonInsertActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow >= 0) {
            int eventId = (int) jTable1.getValueAt(selectedRow, 0);
            int confirmation = JOptionPane.showConfirmDialog(null, "Apakag anda yakin ingin menghapus event ini?", "Hapus Event", JOptionPane.YES_NO_OPTION);
            if (confirmation == JOptionPane.YES_OPTION) {
                eventController.deleteEvent(eventId);
                fetchData();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Silahkan pilih event yang ingin dihapus");
        }
    }//GEN-LAST:event_buttonDeleteActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonEdit;
    private javax.swing.JButton buttonInsert;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
